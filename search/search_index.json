{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"about/","text":"<p>Kube Media is a helm chart you can use to deploy a highly-available media server on any Kubernetes cluster - based on any combination of the following components:</p> <ul> <li>Plex Media Server is a powerful media server that supports all the latest media formats and streaming technologies.</li> <li>Kube Plex is a wrapper shim for the Plex Transcode binary that distributes transcoding to nodes on your Kubernetes   cluster. For each stream this wrapper will spawn a new pod to perform the work. This can provide unlimited   scalability. When this is enabed, an init container will be used to copy the shim over, replacing the original binary.</li> <li>Sonarr is a PVR for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favorite   shows and will grab, sort and rename them.</li> <li>Radarr is a PVR for movies. It can monitor multiple RSS feeds for new releases of your favorite movies and will   grab,   sort and rename them.</li> <li>Lidarr is a PVR for music. It can monitor multiple RSS feeds for new releases of your favorite albums and will grab,   sort and rename them.</li> <li>Prowlarr is an indexer manager/proxy built on the popular arr .net/reactjs base stack to integrate with your various   PVR apps. Prowlarr supports management of both Torrent Trackers and Usenet Indexers.</li> <li>SABnzbd is a multi-platform binary newsgroup downloader. The program works in the background and simplifies the   downloading verifying and extracting of files from Usenet.</li> <li>Transmission is a BitTorrent client which features a variety of user interfaces on top of a cross-platform back-end.</li> <li>Overseerr is a request management and media discovery tool built to work with your existing Plex ecosystem. It can   be used to manage requests, manage media, and discover new media.</li> <li>Tautulli is a 3rd party application that you can run alongside your Plex Media Server to monitor activity and track   various statistics.</li> </ul>","title":"About Kube Media"},{"location":"configuration/","text":"","title":"Configuration"},{"location":"configuration/#configuration","text":"<p>Read through the values.yaml file. It has several commented out suggested values.</p> <p>Specify each parameter using the <code>--set key=value[,key=value]</code> argument to <code>helm install</code>.</p> <pre><code>helm install kube-media \\\n  --set general.timezone=\"Australia/Sydney\" \\\n  kube-media/kube-media\n</code></pre> <p>Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart.</p> <pre><code>helm install kube-media kube-media/kube-media -f values.yaml\n</code></pre>","title":"Configuration"},{"location":"configuration/#full-example","text":"<p>An example of a values.yaml that enables all the features of the chart.</p> <p>This will expose all admin services at the following URLs:</p> <ul> <li>https://plex.k8s.local/</li> <li>https://requests.k8s.local/</li> <li>https://admin.k8s.local/sonarr</li> <li>https://admin.k8s.local/radarr</li> <li>https://admin.k8s.local/lidarr</li> <li>https://admin.k8s.local/prowlarr</li> <li>https://admin.k8s.local/sabnzbd</li> <li>https://admin.k8s.local/transmission</li> </ul> <p>I would recommend using something like Cloudflare Access to secure the backend services - as this is out of sscope for this project.</p> <pre><code>general:\n  ingress_host: admin.k8s.local\n  overseerr_ingress_host: requests.k8s.local\n  plex_ingress_host: plex.k8s.local\n\n  storage:\n    customVolume: true\n    volumes:\n      persistentVolumeClaim:\n        claimName: media-store\n\nplex:\n  enabled: true\n\n  config:\n    PLEX_CLAIM: claim-xxxxxxxx\n\n  ingress:\n    tls:\n      enabled: true\n      secretName: plex-tls\n    annotations: &amp;baseAnnotations\n      kubernetes.io/ingress.class: \"nginx\"\n      cert-manager.io/cluster-issuer: \"letsencrypt-production\"\n\n  extraVolumes:\n    - name: vol-media-01\n      nfs:\n        server: 100.69.2.2\n        path: /vol_media_01\n        readOnly: true\n\n  extraMounts:\n    - name: vol-media-01\n      mountPath: /vol_media_01\n\n  kubePlex:\n    enabled: true\n    mounts: /transcode,/media,/vol_media_01\n\noverseerr:\n  enabled: true\n  ingress:\n    tls:\n      enabled: true\n      secretName: overseerr-tls\n    annotations: *baseAnnotations\n\nservice: &amp;service\n  enabled: true\n  ingress:\n    annotations: *baseAnnotations\n    tls:\n      enabled: true\n      secretName: media-tls\n\nsonarr: *service\nlidarr: *service\nradarr: *service\nprowlarr: *service\nsabnzbd: *service\ntransmission: *service\ntautulli: *service\n</code></pre> <p>This configuration will enable all services, configure the Plex Media Server to use an NFS volume, and enable the scaling plex transcoder.</p>","title":"Full Example"},{"location":"installation/","text":"","title":"Installation"},{"location":"installation/#before-you-start","text":"<ul> <li>You need a Kubernetes cluster, you could create a cluster   on Digital Ocean with $100 free credit.</li> <li>Your Kubernetes cluster should support a ReadWriteMany storage class - Especially if you want auto-scaling   transcoding.</li> <li>You should have a Ingress controller running, you could use   the ingress-nginx controller for this.</li> </ul>","title":"Before you start"},{"location":"installation/#tldr","text":"<pre><code>helm repo add kube-media https://kube-media.dev/\nhelm repo update\nhelm install kube-media kube-media/kube-media\n</code></pre>","title":"TL;DR"},{"location":"installation/#installing-the-chart","text":"<p>To install the chart with the release name <code>kube-media</code></p> <pre><code>helm install kube-media kube-media/kube-media\n</code></pre>","title":"Installing the Chart"},{"location":"installation/#uninstalling-the-chart","text":"<p>To uninstall the <code>kube-media</code> deployment</p> <pre><code>helm uninstall kube-media\n</code></pre> <p>The command removes all the Kubernetes components associated with the chart including persistent volumes and deletes the release.</p>","title":"Uninstalling the Chart"}]}